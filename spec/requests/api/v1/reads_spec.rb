# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/reads', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Read. As you add validations to Read, be sure to
  # adjust the attributes here as well.

  let(:invalid_attributes) do
    attributes_for(:read, user_id: nil, book_id: nil)
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # PlaysController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { Authorization: JsonWebToken.encode(user_id: read.user_id) }
  end

  describe 'GET /index' do
    before { create(:read) }

    let(:valid_headers) do
      { Authorization: JsonWebToken.encode(user_id: create(:user).id) }
    end

    it 'renders a successful response' do
      get api_v1_reads_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    let(:read) { create(:read) }

    it 'renders a successful response' do
      get api_v1_read_url(read), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    let(:user) { create(:user) }
    let(:valid_headers) do
      { Authorization: JsonWebToken.encode(user_id: user.id) }
    end
    let(:valid_attributes) do
      attributes_for(:read, user_id: user.id, book_id: create(:book).id)
    end

    context 'with valid parameters' do
      it 'creates a new Read' do
        expect do
          post api_v1_reads_url,
               params: { read: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Read, :count).by(1)
      end

      it 'renders a JSON response with the new read', :aggregate_failures do
        post api_v1_reads_url,
             params: { read: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Read' do
        expect do
          post api_v1_reads_url,
               params: { read: invalid_attributes },
               headers: valid_headers, as: :json
        end.to change(Read, :count).by(0)
      end

      it 'renders a JSON response with errors for the new read', :aggregate_failures do
        post api_v1_reads_url,
             params: { read: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { did_not_finished: true }
      end
      let(:read) { create(:read) }

      it 'updates the requested read', :aggregate_failures do
        patch api_v1_read_url(read),
              params: { read: new_attributes }, headers: valid_headers, as: :json
        expect(read.reload.did_not_finished).to eq(true)
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      let(:read) { create(:read) }

      it 'renders a JSON response with errors for the read', :aggregate_failures do
        patch api_v1_read_url(read),
              params: { read: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    let!(:read) { create(:read) }

    it 'destroys the requested read' do
      expect do
        delete api_v1_read_url(read), headers: valid_headers, as: :json
      end.to change(Read, :count).by(-1)
    end
  end
end
