require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/reads", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Read. As you add validations to Read, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:book) { create(:book) }

  let(:valid_attributes) do
    attributes_for(:read, user_id: user.id, book_id: book.id)
  end

  let(:invalid_attributes) {
    attributes_for(:read, user_id: nil, book_id: nil)
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # PlaysController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { Authorization: JsonWebToken.encode(user_id: user.id) }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Read.create! valid_attributes
      get api_v1_reads_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      read = Read.create! valid_attributes
      get api_v1_read_url(read), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Read" do
        expect {
          post api_v1_reads_url,
               params: { read: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Read, :count).by(1)
      end

      it "renders a JSON response with the new read", :aggregate_failures do
        post api_v1_reads_url,
             params: { read: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Read" do
        expect {
          post api_v1_reads_url,
               params: { read: invalid_attributes },
               headers: valid_headers, as: :json
        }.to change(Read, :count).by(0)
      end

      it "renders a JSON response with errors for the new read", :aggregate_failures do
        post api_v1_reads_url,
             params: { read: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { did_not_finished: true }
      }

      it "updates the requested read" do
        read = Read.create! valid_attributes
        patch api_v1_read_url(read),
              params: { read: new_attributes }, headers: valid_headers, as: :json
        read.reload
        expect(read.did_not_finished).to eq(true)
      end

      it "renders a JSON response with the read", :aggregate_failures do
        read = Read.create! valid_attributes
        patch api_v1_read_url(read),
              params: { read: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the read", :aggregate_failures do
        read = Read.create! valid_attributes
        patch api_v1_read_url(read),
              params: { read: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested read" do
      read = Read.create! valid_attributes
      expect {
        delete api_v1_read_url(read), headers: valid_headers, as: :json
      }.to change(Read, :count).by(-1)
    end
  end
end
